# Kernel Bisection Configuration
# Copy this file to bisect.yaml in your bisection directory and customize
#
# Per-Directory Workflow:
# Each bisection case should have its own directory with:
#   - bisect.yaml (this config file)
#   - bisect.db (database, created automatically)
#
# Example:
#   mkdir ~/bisect-boot-issue
#   cd ~/bisect-boot-issue
#   cp /path/to/bisect.conf.example ./bisect.yaml
#   vim bisect.yaml  # customize
#   kbisect init v6.1 v6.6

# Slave machine configuration
slave:
  hostname: 192.168.1.100           # Slave machine IP or hostname
  ssh_user: root                     # SSH user for slave access
  kernel_path: /root/kernel          # Path to kernel source on slave
  bisect_path: /root/kernel-bisect/lib  # Path where bisect library will be deployed

# Kernel repository (optional - automatic repository deployment)
# If configured, the repository will be cloned/copied on master and transferred to slave
# This eliminates the need to manually clone the kernel source on the slave
kernel_repo:
  # Git repository URL or local filesystem path
  # Examples:
  #   - https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
  #   - https://github.com/torvalds/linux.git
  #   - /home/user/local-kernel-repo
  source: null

  # Optional: Branch or ref to checkout after clone
  # If not specified, uses repository's default branch
  # Examples: main, master, linux-6.6.y
  branch: null

# Deployment configuration (automatic slave setup)
deployment:
  auto_deploy: true                  # Automatically deploy to slave if not set up
  verify_before_bisect: true         # Verify slave setup before starting bisection
  auto_update: false                 # Auto-update scripts on slave before each run
  rsync_options: "-avz --delete"     # Rsync options for deployment

# IPMI configuration (for power control and recovery)
ipmi:
  host: 192.168.1.101               # IPMI interface IP
  username: admin                    # IPMI username
  password: changeme                 # IPMI password (use keyring in production)

# Timeouts (in seconds)
timeouts:
  boot: 300                          # Boot timeout
  test: 600                          # Test timeout
  build: 1800                        # Build timeout (30 minutes)

# Disk space management
disk_management:
  boot_min_free_mb: 500             # Minimum free space in /boot before cleanup
  boot_emergency_mb: 100            # Emergency cleanup threshold
  keep_test_kernels: 1              # Number of test kernels to keep

# Kernel configuration
kernel_config:
  # Path to base .config file (optional)
  # If not specified and use_running_config is false, kernel defaults are used
  config_file: null

  # Use running kernel's config as base (default: false)
  # If both config_file and use_running_config are set, config_file takes precedence
  use_running_config: false

# Kernel protection
protection:
  auto_lock_current_kernel: true    # Lock current kernel at init
  verify_protected_after_cleanup: true  # Verify protection after cleanup

# Test configuration
tests:
  - type: boot                      # Boot success test (always runs)

  - type: custom                    # Custom test script
    path: /root/kernel_build_and_install/reproducers/my-test.sh
    enabled: false

# Cleanup strategy
cleanup:
  mode: aggressive                  # aggressive | conservative
  only_delete_bisect_tagged: true  # Only delete kernels tagged with -bisect-
  verify_before_delete: true       # Triple-check before deletion

# State and Database (per-directory isolation)
# All bisection state and metadata stored in SQLite database
database_path: bisect.db            # SQLite database file (default: ./bisect.db)
state_dir: .                        # Working directory for database (default: current directory)

# Metadata collection
metadata:
  collect_baseline: true            # Collect system metadata at session start
  collect_per_iteration: true       # Collect kernel metadata per iteration
  collect_kernel_config: true       # Include kernel .config in metadata
  collect_packages: true            # Include rpm -qa / dpkg -l
  compress_large_data: true         # Gzip large metadata files
  # Note: All metadata stored in database (no filesystem files)

# Console log collection (boot process logs)
console_logs:
  enabled: false                    # Enable console log collection during boot
  collector: "auto"                 # "conserver" | "ipmi" | "auto"
  # Override hostname for console connection (default: slave hostname)
  hostname: null
  # Fall back to IPMI SOL if conserver fails
  fallback_to_ipmi: true
  # Console logs are stored in database (build_logs table, log_type="console")
  # View with: kbisect logs list --log-type console

# Application Logging
# Logs are printed to terminal (stdout/stderr)
# Use --verbose flag for DEBUG level output: kbisect --verbose start
# Build logs and console logs are stored in the database (see console_logs section above)
